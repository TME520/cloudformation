{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template deploys a full instance of Protocol/7 (EC2, R53, Jenkins, p7, cb1).",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "ec2key",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "authorized_ip": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "hosted_zone_name": {
      "Description": "The route53 hosted_zone_name. Don't forget the period at the end.",
      "Type": "String",
      "Default": ""
    },
    "p7_instance_name": {
      "Description": "Name for this instance of Protocol/7",
      "Type": "String",
      "Default": "p7"
    },
    "p7_instance_client": {
      "Description": "Name of the client being monitored by this instance of Protocol/7.",
      "Type": "String",
      "Default": "pantzumatic"
    },
    "p7_instance_env": {
      "Description": "Name of the environment being monitored by this instance of Protocol/7 (dev, test, uat, integ, prod...)",
      "Type": "String",
      "Default": "test"
    },
    "p7_instance_project": {
      "Description": "Name of the project this instance of Protocol/7 is monitoring.",
      "Type": "String",
      "Default": "mkultra"
    },
    "stack_name": {
      "Description": "Name given to the stack",
      "Type": "String",
      "Default": ""
    },
    "slack_token": {
      "Description": "The Slack token that will be used to interact with Slack.",
      "Type": "String",
      "Default": ""
    },
    "azure_storage_account_name": {
      "Description": "The Microsoft Azure storage account that will be used to store the dashboard HTML files.",
      "Type": "String",
      "Default": ""
    },
    "azure_storage_account_key": {
      "Description": "The key for the Microsoft Azure storage account.",
      "Type": "String",
      "Default": ""
    },
    "azure_devops_url": {
      "Description": "The URL from which your Microsoft DevOps account can be accessed.",
      "Type": "String",
      "Default": ""
    },
    "azure_devops_pat": {
      "Description": "The Personal Access Token that will be used to interact with Azure DevOps (in order to retrieve latest deployments for example).",
      "Type": "String",
      "Default": ""
    },
    "nt_api_user": {
      "Description": "N/A",
      "Type": "String",
      "Default": ""
    },
    "nt_api_password": {
      "Description": "N/A",
      "Type": "String",
      "Default": ""
    },
    "nt_api_search_url": {
      "Description": "N/A",
      "Type": "String",
      "Default": ""
    },
    "nt_api_login_url": {
      "Description": "N/A",
      "Type": "String",
      "Default": ""
    },
    "sumo_endpoint": {
      "Description": "The HTTPS endpoint used to send logs to Sumologic.",
      "Type": "String",
      "Default": ""
    },
    "dynamodb_url": {
      "Description": "The URL used to interact with DynamoDB. The stack includes a local instance of DynamoDB that you should use unless you really know what you do. DO NOT APPEND http:// IN FRONT OF THE URL.",
      "Type": "String",
      "Default": ""
    },
    "chatbotone_data_folder": {
      "Description": "The folder used by Chat Bot One to write its data.",
      "Type": "String",
      "Default": ""
    },
    "dashboard_filename": {
      "Description": "The HTML file generated by Protocol/7 to be used as a dashboard (simple mode).",
      "Type": "String",
      "Default": ""
    },
    "advanced_dashboard_filename": {
      "Description": "The HTML file generated by Protocol/7 to be used as a dashboard (advanced mode).",
      "Type": "String",
      "Default": ""
    },
    "dashboard_base_url": {
      "Description": "The URL pointing to the HTML dashboard files.",
      "Type": "String",
      "Default": ""
    },
    "logs_folder": {
      "Description": "The location of Protocol/7's logs.",
      "Type": "String",
      "Default": ""
    },
    "log_filename": {
      "Description": "The main log file for Protocol/7.",
      "Type": "String",
      "Default": ""
    },
    "config_filename": {
      "Description": "The config file for Protocol/7.",
      "Type": "String",
      "Default": ""
    },
    "enable_blinkstick": {
      "Description": "Enable Blinkstick usage (not recommended unless you run Protocol/7 locally).",
      "Type": "String",
      "Default": ""
    },
    "enable_slack": {
      "Description": "Let Protocol/7 write messages to Slack.",
      "Type": "String",
      "Default": ""
    },
    "enable_sumologic": {
      "Description": "Let Protocol/7 send its log to Sumologic.",
      "Type": "String",
      "Default": ""
    },
    "enable_dashboard": {
      "Description": "Let Protocol/7 generate a dashboard (2 HTML files hosted somewhere).",
      "Type": "String",
      "Default": ""
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t2.micro": {
        "Arch": "HVM64"
      }
    },
    "AWSInstanceType2NATArch": {
      "t2.micro": {
        "Arch": "NATHVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "ap-southeast-2": {
        "PV64": "ami-63351d00",
        "HVM64": "ami-dc361ebf",
        "HVMG2": "ami-0ad2db69"
      }
    }
  },
  "Resources": {
    "EC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "created-by",
            "Value": "TME520"
          },
          {
            "Key": "expiry",
            "Value": "never"
          },
          {
            "Key": "purpose",
            "Value": "This EC2 instance runs Protocol/7."
          },
          {
            "Key": "stack",
            "Value": { "Ref": "AWS::StackName" }
          }
        ],
        "UserData": {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash -xe\n",
                "yum install -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init ",
                "         --stack ", { "Ref" : "AWS::StackName" },
                "         --resource EC2Instance ",
                "         --configsets FullProtocol7 ",
                "         --region ", { "Ref" : "AWS::Region" }, "\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "FullProtocol7": ["AddYumRepositories","YumUpgrade","BasicSetup","JenkinsWeeklySetup","DDBInstall","DDBStart","P7Install","P7Configure"]
          },
          "AddYumRepositories": {
            "commands": {
              "add_jenkins_repo": {
                "command": "wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo && rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key && yum remove -y java-1.7.0-openjdk"
              }
            }
          },
          "YumUpgrade": {
            "commands": {
              "upgrade_yum_packages": {
                "command": "yum update -y && yum upgrade -y"
              }
            }
          },
          "BasicSetup": {
            "packages": {
              "yum": {
                "htop": [],
                "git": [],
                "python36-pip": [],
                "jenkins": [],
                "java-1.8.0-openjdk-devel": []
              }
            },
            "files": {
              "/home/ec2-user/.cfn-init-run-check": {
                "content": {
                  "Fn::Join" : [
                    "", [
                      "[general]\n",
                      "Stack: ", { "Ref": "AWS::StackName" }, "\n",
                      "Region: ", { "Ref": "AWS::Region" }, "\n"
                    ]
                  ]
                },
                "mode": "000644",
                "user": "ec2-user",
                "group": "ec2-user"
              }
            }
          },
          "JenkinsWeeklySetup": {
            "commands": {
              "start_jenkins": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "echo 'Starting Jenkins...';",
                      "service jenkins start;"
                    ]
                  ]
                }
              }
            }
          },
          "DDBInstall": {
            "commands": {
              "dl_and_install_dynamodb": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "cd /home/ec2-user/ && mkdir dynamodb && cd ./dynamodb;",
                      "wget -O dynamodb_local_latest.tar.gz https://s3.ap-southeast-1.amazonaws.com/dynamodb-local-singapore/dynamodb_local_latest.tar.gz;",
                      "tar xzvf dynamodb_local_latest.tar.gz;",
                      "chown -R ec2-user:ec2-user /home/ec2-user/dynamodb/;"
                    ]
                  ]
                }
              }
            }
          },
          "DDBStart": {
            "commands": {
              "start_dynamodb": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "cd /home/ec2-user/dynamodb/;",
                      "nohup java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -port 8001 > foo.out 2> foo.err < /dev/null &"
                    ]
                  ]
                }
              }
            }
          },
          "P7Install": {
            "commands": {
              "install_protocol7": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "echo 'Installing Protocol/7...';",
                      "pip install --upgrade pip;",
                      "pip-3.6 install --user 'cozmo[camera]';",
                      "cd /home/ec2-user/;",
                      "git clone https://github.com/TME520/protocol7.git;",
                      "chown -R ec2-user:ec2-user ./protocol7/;"
                    ]
                  ]
                }
              }
            }
          },
          "P7Configure": {
            "files": {
              "/tmp/.cfn-init-was-there": {
                "content": {
                  "Fn::Join": [
                    "", [
                      "[general]\n",
                      "Stack: ", { "Ref": "AWS::StackName" }, "\n",
                      "Region: ", { "Ref": "AWS::Region" }, "\n",
                      "P7 instance name: ", { "Ref": "p7_instance_name" }, "\n",
                      "P7 instance client: ", { "Ref": "p7_instance_client" }, "\n",
                      "P7 instance environment: ", { "Ref": "p7_instance_env" }, "\n",
                      "P7 instance project: ", { "Ref": "p7_instance_project" }, "\n"
                    ]
                  ]
                },
                "mode": "000644",
                "user": "ec2-user",
                "group": "ec2-user"
              }
            },
            "commands": {
              "configure_protocol7": {
                "command": {
                  "Fn::Join": [
                    "", [
                      "echo 'Configuring Protocol/7...';",
                      "touch /home/ec2-user/all_clear;",
                      "touch /home/ec2-user/cloudformation/all_clear;",
                      "touch /home/ec2-user/cloudformation/all_clear2;"
                    ]
                  ]
                }
              }
            }
          }
        }
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access via port 22 and HTTP access via port 8080.",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": { "Ref": "authorized_ip" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 8080,
            "ToPort": 8080,
            "CidrIp": { "Ref": "authorized_ip" }
          }
        ],
        "Tags": [
          {
            "Key" : "created-by",
            "Value" : "TME520"
          },
          {
            "Key" : "expiry",
            "Value" : "never"
          },
          {
            "Key" : "purpose",
            "Value" : "Run Protocol/7 safely."
          },
          {
            "Key": "stack",
            "Value": { "Ref": "AWS::StackName" }
          }
        ]
      }
    },
    "myDNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "hosted_zone_name": { "Ref": "hosted_zone_name" },
        "Comment": "DNS name for my instance",
        "Name" : { "Fn::Join": [ "", [ "", { "Ref": "AWS::StackName" }, ".", { "Ref": "hosted_zone_name" } ] ] },
        "TTL" : 900,
        "Type" : "CNAME",
        "ResourceRecords": [
          { "Fn::GetAtt": [ "EC2Instance", "PublicIp" ] }
        ]
      }
   }
  },
  "Outputs": {
    "InstanceId": {
      "Description": "InstanceId of the newly created EC2 instance",
      "Value": {
        "Ref": "EC2Instance"
      }
    },
    "AZ": {
      "Description": "Availability Zone of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance",
          "AvailabilityZone"
        ]
      }
    },
    "PublicDNS": {
      "Description": "Public DNSName of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance",
          "PublicDnsName"
        ]
      }
    },
    "PublicIP": {
      "Description": "Public IP address of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance",
          "PublicIp"
        ]
      }
    },
    "SSHConnectionShellCommand": {
      "Description": "The command line you have to type in order to SSH into the EC2 instance (path to SSH key may vary).",
      "Value": {
        "Fn::Join": [ "", [ "", "ssh -v -i $HOME/.ssh/", { "Ref": "KeyName"}, ".pem ec2-user@", { "Fn::GetAtt": [ "EC2Instance", "PublicIp" ] } ] ]
      }
    },
    "RecordSetName": {
      "Description": "The DNS entry pointing to the EC2 instance.",
      "Value": {
        "Fn::Join": [ "", [ "", { "Ref": "AWS::StackName" }, ".", { "Ref": "hosted_zone_name" } ] ]
      }
    },
    "FQDNSSHConnectionShellCommand": {
      "Description": "The command line you have to type in order to SSH into the EC2 instance (path to SSH key may vary).",
      "Value": {
        "Fn::Join": [ "", [ "", "ssh -v -i $HOME/.ssh/", { "Ref": "KeyName"}, ".pem ec2-user@", { "Ref": "AWS::StackName" }, ".", { "Ref": "hosted_zone_name" } ] ]
      }
    },
    "JenkinsURL": {
      "Description": "The URL you have to open in order to use Jenkins.",
      "Value": {
        "Fn::Join": [ "", [ "", "http://", { "Ref": "AWS::StackName" }, ".", { "Ref": "hosted_zone_name" }, ":8080" ] ]
      }
    }
  }
}
